basePath: /
definitions:
  api.AppRequest:
    properties:
      date_format:
        description: Date Format set up for the App.
        type: string
      debug_mode:
        description: |-
          Whether Logs gathering is Enabled for all Devices associated with the App.
          [Coresponds to the `Enable all Devices` option in tne UI.]
        type: boolean
      id:
        description: ID of the App. This is used to query single App specific endpoints.
        type: integer
      key:
        description: App Key associated with the App. Used for SDK communication.
        type: string
      name:
        description: Name of the App.
        type: string
      operating_system:
        description: |-
          What OS the App is running on.

          Possible values are:

          `-1` - Multiplatform

          `0` - iOS

          `1` - Android

          `2` - MacOS

          `3` - Web
        type: integer
      public_app_id:
        type: string
      stats:
        allOf:
        - $ref: '#/definitions/api.appStats'
        description: App's Statistics.
      team:
        allOf:
        - $ref: '#/definitions/api.TeamRequest'
        description: Information about Team to which the App belongs.
      team_id:
        description: ID of the Team to which the App belongs.
        type: integer
      time_zone:
        description: Time Zone used when export App's Logs to S3.
        type: string
      upload_symbols_token:
        description: Token used to automate symbols uploading.
        type: string
    type: object
  api.DeviceDataErasureRequest:
    properties:
      erase:
        type: boolean
    type: object
  api.DeviceEditRequest:
    properties:
      log_enabled:
        description: Sets whether Logs should be gathered for the Device.
        type: boolean
    type: object
  api.DeviceResponse:
    properties:
      app_id:
        description: App ID with which the Device is associated.
        type: integer
      build:
        description: What App build the Device is using.
        type: string
      device_type:
        description: Type of the Device. I.e. a model such as `iPhone9`.
        type: string
      device_type_name:
        description: Kind-of human readable type of the device (e.g. `iPhone9`).
        type: string
      erasure_mode:
        description: The device has been deleted and blocked. Most of the fields will
          be empty.
        type: boolean
      firebase_test_lab:
        description: Whether the Device is running in Firebase test lab.
        type: boolean
      id:
        description: ID of the Device. This is used to query single Device specific
          endpoints.
        type: integer
      is_connected:
        description: |-
          Whether the Device is connected into the system.
          Determined by checking for activity in the last 5 minutes.
        type: boolean
      language:
        description: What language the Device is using.
        type: string
      last_log_date:
        description: Time when last Log from the Device was seen.
        type: string
      last_ping_at:
        description: When the Device was last pinged at.
        type: string
      log_enabled:
        description: Whether logging is enabled for the Device.
        type: boolean
      name:
        description: Name of the Device.
        type: string
      os_version:
        description: What OS version the Device is running.
        type: string
      sdk_type:
        description: |-
          Type of the SDK the Device is using.

          Possible values are:

          `-1` - Multiplatform

          `0` - iOS

          `1` - Android

          `2` - MacOS

          `3` - Web
        type: integer
      sdk_version:
        description: Version of the SDK that the Device is using.
        type: string
      stats:
        allOf:
        - $ref: '#/definitions/api.deviceStats'
        description: Device's statistics.
      udid:
        description: Globally unique ID of the Device.
        type: string
      user_data:
        description: |-
          User defined key:value pairs.

          Note that maximum of 32 keys are returned, even though it is
          theoretically possible to define more.
        items:
          $ref: '#/definitions/schema.KeyValuePair'
        type: array
      version:
        description: What App version the Device is running.
        type: string
    type: object
  api.DeviceWriterJSON:
    properties:
      devices:
        items:
          $ref: '#/definitions/api.DeviceResponse'
        type: array
      next_cursor:
        type: string
      out_of_retention_period:
        description: |-
          Some of the requested data is outside retention period for the selected plan.

          Not used at the moment, always set to `false`.
        type: boolean
      total_count:
        type: integer
    type: object
  api.TeamRequest:
    properties:
      apps:
        description: |-
          Apps belonging to the Team.
          Not returned in App List response.
        items:
          $ref: '#/definitions/api.AppRequest'
        type: array
      has_card:
        description: Whether the Team has payment card set up.
        type: boolean
      has_oauth_clients:
        description: Whether the team has clients added to the OAuth API access.
        type: boolean
      id:
        description: ID of the Team. This is used to query Team specific endpoints.
        type: integer
      is_over_quota:
        description: Whether the Team has exceeded the Logs quota.
        type: boolean
      is_response_limited:
        description: |-
          Whether some values are expected to not be present.
          For example due to User only having App level access to the Team.
          Currently, fields guaranteed to be filled in this mode are:
          * ID
          * Name
          * Picture
        type: boolean
      is_team_active:
        description: Whether the Team is active.
        type: boolean
      is_team_delinquent:
        description: Whether the Team is delinquent (24 hours have passed from next_billing)
        type: boolean
      name:
        description: Name of the Team.
        type: string
      picture:
        description: Unused.
        type: string
      plan:
        allOf:
        - $ref: '#/definitions/api.plan'
        description: Plan to which the Team is subscribed.
      recommend_upgrade:
        description: Whether to recommend plan upgrade to the Team.
        type: boolean
      required_2fa:
        description: Whether the Team has mandatory 2 Factor Authentication set up.
        type: boolean
      saml_domains:
        description: |-
          SAML Domain Trusts defined for the Team.
          Not returned in App List response.
        items:
          $ref: '#/definitions/saml.DomainTrust'
        type: array
      users:
        description: |-
          Users in the Team.
          Not returned in App List response.
        items:
          $ref: '#/definitions/api.teamUser'
        type: array
    type: object
  api.appRole:
    properties:
      app_id:
        type: integer
      role:
        type: string
    type: object
  api.appStats:
    properties:
      active_devices_today:
        description: Number of Devices seen active today (so far) (i.e. UTC between
          00:00 and now).
        type: integer
      active_devices_yesterday:
        description: Number of Devices seen active yesterday (i.e. UTC between 00:00
          and 23:59).
        type: integer
      errors_today:
        description: Number of Errors found in today's Logs (so far).
        type: integer
      errors_yesterday:
        description: Number of Errors found in yesterday's Logs.
        type: integer
      has_devices:
        description: Whether the App has any Devices attached to it.
        type: boolean
      logs_today:
        description: Number of Log entries stored today (so far).
        type: integer
      logs_yesterday:
        description: Number of Log entries stored yesterday.
        type: integer
      open_crashes_today:
        description: Number of Crashes found in today's Logs (so far).
        type: integer
      open_crashes_yesterday:
        description: Number of Crashes found in yesterday's Logs.
        type: integer
      open_feedback_today:
        description: Number of Feedback entries creadted today (so far).
        type: integer
      open_feedback_yesterday:
        description: Number of Feedback entries created yesterday.
        type: integer
      open_issues_today:
        description: Number of Issues found in today's Logs (so far).
        type: integer
      open_issues_yesterday:
        description: Number of Issues found in yesterday's Logs.
        type: integer
      total_devices:
        description: Total number of Devices attached to the App (i.e. active at any
          point in time).
        type: integer
    type: object
  api.deviceStats:
    properties:
      errors:
        description: Number of Errors found in the Logs.
        type: integer
      logs:
        description: Number of stored Logs.
        type: integer
      warnings:
        description: Number of Warnings found in the Logs.
        type: integer
    type: object
  api.logSearchResult:
    properties:
      absolute_time:
        description: |-
          Sorter: specifies the order of occurrence of the logs when multiple logs have the same timestamp (`time` field).
          For the same `time` value, it is guaranteed no two logs will have the same `absolute_time`.
          There are no restrictions for this value for different `time`.
          Therefore, the following tuple is guaranteed to be unique: (`app`, `device.udid`, `time`, `absolute_time`).
        type: integer
      activity_name:
        description: If present, contains name of the Android Activity inside which
          the Log occurred.
        type: string
      activity_status:
        description: If present, contains status of the Android Activity inside which
          the Log occurred.
        type: string
      app:
        description: App ID
        type: integer
      app_id_session_uuid:
        description: (do not use)
        type: string
      device.id:
        description: (do not use)
        type: integer
      device.name:
        description: Device name
        type: string
      device.sdk_type:
        description: DeviceSdkType sdk type information at log level
        type: integer
      device.type:
        description: Device model
        type: string
      device.udid:
        description: Device UDID (usually a UUID)
        type: string
      file:
        description: File name where the log originated
        type: string
      gap_end:
        description: Time at which the gap in logs reporting ended.
        format: date-time
        type: string
      gap_start:
        description: |-
          If present, the Log entry represents a gap in logs reporting.
          The field marks time at which the gap started.
        format: date-time
        type: string
      interaction_class:
        description: |-
          If present, contains information about callback
          (e.g. Android event such as `OnClick` or iOS selector subscription) execution during which the Log occurred.
          The field contains the target class name.
        type: string
      interaction_detail:
        description: Event type dependent detail(s) of the callback, such as `id`,
          `title`, `position`, etc.
        type: string
      interaction_event_name:
        description: Name of the fired function/method.
        type: string
      interaction_sender:
        description: Name of the class which sent the callback.
        type: string
      issue_error:
        description: If there was any error when enriching Issue, it will be contained
          here.
        type: string
      issue_id:
        description: ID of the Issue associated with the Log, if any.
        type: string
      issue_markdown:
        description: |-
          If associated Issue exists, contains its' message.
          Not used anymore, Issue text is sent in Text field.
        type: string
      issue_status:
        allOf:
        - $ref: '#/definitions/schema.IssueStatus'
        description: 'If associated Issue exists, contains its'' status. Possible
          values: 1 (open), 4 (closed)'
        enum:
        - 1
        - 4
      issue_title:
        description: If associated Issue exists, contains its' title.
        type: string
      issue_uuid:
        description: If Log is associated with Issue, this will hold its UUID
        type: string
      js_xpath:
        description: JS Element XPath
        type: string
      key_value_key:
        description: |-
          If present, the Log entry contains value for a custom key:value pair.
          The field contains the key.
        type: string
      key_value_value:
        description: Value of the key denoted by `KeyValueKey` field.
        type: string
      language:
        description: Device language setting
        type: string
      line:
        description: Line number where the log originated
        type: integer
      log_level:
        description: |-
          Log level: Fatal (5), Error (2), Warning (1), Info (4), Debug (0), Trace (3) (from more to less critical).
          Note enum numbers are not sorted for backwards compatibility.
        type: integer
      matching_result:
        description: This log is a search result and should be highlighted
        type: boolean
      method:
        description: Method where the log originated
        type: string
      os_version:
        description: Device operating system version
        type: string
      session:
        description: (do not use)
        type: integer
      session_uuid:
        description: SessionUUID derivative from AppIDSessionUUID
        type: string
      tag:
        description: Log tag
        type: string
      text:
        description: Log message
        type: string
      text_html:
        description: |-
          Log text in HTML format
          If a search highlight has been requested, the matches will be enclosed in <highlight></highlight> tags
        type: string
      thread_id:
        description: Thread ID where the log originated
        type: string
      thread_name:
        description: Thread name where the log originated
        type: string
      time:
        description: |-
          Timestamp when the log was generated (using the originating device's clock).
          This timestamp is corrected by Bugfender if it's obviously wrong (far in the past or in the future).
        type: string
      timezone:
        description: Device time zone
        type: string
      type:
        description: Type of the Log.
        type: string
      url:
        description: URL where the event happened
        type: string
      uuid:
        description: Identifier of the log
        type: string
      version.build:
        description: App build (eg. 1234)
        type: string
      version.id:
        description: App version ID (do not use)
        type: integer
      version.version:
        description: App version (eg. 1.2.3.4)
        type: string
      view_controller_name:
        description: If present, contains name of the iOS VC in which the Log occured.
        type: string
      view_controller_title:
        description: If present, contains title of the iOS VC in which the Log occured.
        type: string
    type: object
  api.paginatedLogSearchResults:
    properties:
      current:
        description: Order number of the current search result (zero based)
        type: integer
      next:
        description: Cursor to next search result (URL)
        type: string
      previous:
        description: Cursor to previous search result (URL)
        type: string
      total:
        description: Number of search results
        type: integer
    type: object
  api.paginatedLogs:
    properties:
      data:
        description: Logs
        items:
          $ref: '#/definitions/api.logSearchResult'
        type: array
      last:
        description: Cursor to last page of results (URL). Useful to jump to the end
          and then scroll backwards.
        type: string
      next:
        description: |-
          Cursor to next page of results (URL)
          Please note by default searches are done in reverse order (newest logs first), so the next page will return older logs.
        type: string
      out_of_retention_period:
        description: Indicates the time filters have been adjusted because they were
          out of retention period
        type: boolean
      previous:
        description: |-
          Cursor to previous page of results (URL).
          Please note by default searches are done in reverse order (newest logs first), so the previous page will return newer logs.
        type: string
      search_results:
        allOf:
        - $ref: '#/definitions/api.paginatedLogSearchResults'
        description: Highlighting search results (only if `highlight_text` was used
          in the query)
    type: object
  api.plan:
    properties:
      app_limit:
        description: Maximum number of Apps allowed.
        type: integer
      code:
        description: Internal code name of the Plan.
        type: string
      currency:
        description: Currency in which the Price is (ISO 4217 code).
        type: string
      daily_log_limit:
        description: Maximum number of Logs per day.
        type: integer
      data_retention:
        description: Data retention period (in days).
        type: integer
      developer_accounts:
        description: Maximum number of Users allowed in the Team.
        type: integer
      interval:
        description: Reneval interval (in days, currently either 30 or 365).
        type: integer
      is_enterprise:
        description: IsEnterprise defines whether the plan is Enterprise
        type: boolean
      is_pro_or_better:
        description: IsProOrBetter defines whether the plan is of type Pro or better
        type: boolean
      name:
        description: User readable name of the Plan.
        type: string
      price:
        description: Price of the Plan.
        type: number
      subscription_valid_until:
        description: Date at which the current subscription will expire.
        type: string
    type: object
  api.teamUser:
    properties:
      app_roles:
        items:
          $ref: '#/definitions/api.appRole'
        type: array
      email:
        type: string
      gravatar_url:
        type: string
      id:
        type: integer
      name:
        type: string
      role:
        type: string
      small_avatar_url:
        description: deprecated
        type: string
      two_factor_authentication_enabled:
        type: boolean
      type:
        type: string
    type: object
  api.versionsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/schema.AppVersion'
        type: array
      next_cursor:
        description: Cursor to the next page.
        type: integer
      total_count:
        description: Total number of available versions.
        type: integer
      total_count_is_accurate:
        type: boolean
    type: object
  logfile.ndJSONOutput:
    properties:
      activity_name:
        description: If present, contains name of the Android Activity inside which
          the Log occurred.
        type: string
      activity_status:
        description: If present, contains status of the Android Activity inside which
          the Log occurred.
        type: string
      app_build:
        description: Build of the App running on the associated Device.
        type: string
      app_version:
        description: Version of the App running on the associated Device.
        type: string
      device.sdk_type:
        description: DeviceSdkType sdk type information at log level
        type: integer
      device_id:
        description: |-
          ID of the Device from which the Log was sent.
          Note that this is `udid`, not `id` from the `device` structure.
        type: string
      device_model:
        description: Type of the associated Device (e.g. `iPhone9`).
        type: string
      device_name:
        description: Human name of the associated Device.
        type: string
      device_sdk_type:
        description: Sdk type of the associated Device
        type: string
      file:
        description: Name of the source file in which the Log occured.
        type: string
      gap_end:
        description: Time at which the gap in logs reporting ended.
        format: date-time
        type: string
      gap_start:
        description: |-
          If present, the Log entry represents a gap in logs reporting.
          The field marks time at which the gap started.
        format: date-time
        type: string
      id:
        description: Globally unique Log ID.
        type: string
      interaction_class:
        description: |-
          If present, contains information about callback
          (e.g. Android event such as `OnClick` or iOS selector subscription) execution during which the Log occurred.
          The field contains the target class name.
        type: string
      interaction_detail:
        description: Event type dependent detail(s) of the callback, such as `id`,
          `title`, `position`, etc.
        type: string
      interaction_event_name:
        description: Name of the fired function/method.
        type: string
      interaction_sender:
        description: Name of the class which sent the callback.
        type: string
      issue_error:
        description: If there was any error when enriching Issue, it will be contained
          here.
        type: string
      issue_id:
        description: ID of the Issue associated with the Log, if any.
        type: string
      issue_markdown:
        description: |-
          If associated Issue exists, contains its' message.
          Not used anymore, Issue text is sent in Text field.
        type: string
      issue_status:
        allOf:
        - $ref: '#/definitions/schema.IssueStatus'
        description: 'If associated Issue exists, contains its'' status. Possible
          values: 1 (open), 4 (closed)'
        enum:
        - 1
        - 4
      issue_title:
        description: If associated Issue exists, contains its' title.
        type: string
      js_xpath:
        description: JS Element XPath
        type: string
      key_value_key:
        description: |-
          If present, the Log entry contains value for a custom key:value pair.
          The field contains the key.
        type: string
      key_value_value:
        description: Value of the key denoted by `KeyValueKey` field.
        type: string
      language:
        description: Language running on the associated Device.
        type: string
      level:
        description: Severity level of the Log.
        type: string
      line:
        description: Line number in the originating source `file`.
        type: integer
      method:
        description: Name of the method in which the Log occured.
        type: string
      order_sorter:
        description: |-
          Value used to keep logs in order.
          Currently set to absolute time at which the Log occured.
        type: integer
      os_version:
        description: Version of the OS running on the associated Device.
        type: string
      session_uuid:
        description: SessionUUID derivative from AppIDSessionUUID
        type: string
      tag:
        description: Tag assigned to the Log.
        type: string
      text:
        description: Text contents of the Log call.
        type: string
      thread_id:
        description: ID of the thread in which the originating `method` was running.
        type: string
      thread_name:
        description: Name of the thread in which the originating `method` was running.
        type: string
      timestamp:
        description: Time at which the Log was generated.
        type: string
      type:
        description: Type of the Log.
        type: string
      view_controller_name:
        description: If present, contains name of the iOS VC in which the Log occured.
        type: string
      view_controller_title:
        description: If present, contains title of the iOS VC in which the Log occured.
        type: string
    type: object
  saml.DomainTrust:
    properties:
      dns:
        type: string
      idp_entity_id:
        type: string
      restrict_to_saml:
        description: users can not sign up, log in with password, log in with github,
          set passwords or change their email address
        type: boolean
    type: object
  schema.AppVersion:
    properties:
      app_id:
        description: ID of the App with which the version is associated.
        type: integer
      build:
        description: Stringified build identifier (e.g. "079").
        type: string
      id:
        type: integer
      symbols:
        description: List of symbols available for the version.
        items:
          $ref: '#/definitions/schema.AppVersionSymbol'
        type: array
      version:
        description: Stringified version (e.g. "1.2.3").
        type: string
    type: object
  schema.AppVersionSymbol:
    properties:
      id:
        type: integer
      origin_filename:
        description: Filename of the file as specified during the upload.
        type: string
      os:
        description: Stringified operating system identifier (e.g. "ios").
        type: string
    type: object
  schema.AppVersionsQuery:
    properties:
      next_cursor:
        description: Cursor from which to start retrieving data.
        type: integer
      page_size:
        description: Desired size of the page.
        type: integer
    type: object
  schema.Error:
    properties:
      code:
        description: Numeric code of the error.
        type: integer
      field:
        description: Currently unused.
        type: string
      message:
        description: Human readable error message.
        type: string
    type: object
  schema.IssueStatus:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    type: integer
    x-enum-varnames:
    - New
    - Open
    - Resolved
    - Invalid
    - Closed
  schema.KeyValuePair:
    properties:
      key:
        type: string
      value:
        description: can be bool, float64, string or nil
    type: object
  web.errorResponse:
    properties:
      error:
        type: string
    type: object
  web.tokenResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      refresh_token:
        type: string
      token_type:
        type: string
    type: object
host: dashboard.bugfender.com
info:
  contact:
    email: support@bugfender.com
    name: Bugfender Team
    url: https://bugfender.com
  description: |-
    Bugfender offers this API to access logs and some other dashboard functionalities programmatically.

    ### Rate limits
    This API uses
    [draft-ietf-httpapi-ratelimit-headers-06](https://datatracker.ietf.org/doc/draft-ietf-httpapi-ratelimit-headers/)
    to inform about rate limits.
    You may check the limit for a specific endpoint by inspecting the `RateLimit-Policy` header.
    For example, `100;w=60` means 100 queries per 60 seconds.

    You may also use `RateLimit-Limit`, `RateLimit-Remaining`, and `RateLimit-Reset` to learn about the
    current status of your quota.

    Since the `RateLimit-*` header specification is draft, it is subject to change.

    If you hit the limits often and you have a legitimate use case, please contact support.
  termsOfService: https://bugfender.com/terms-of-service/
  title: Bugfender API
  version: "1"
paths:
  /api/app:
    get:
      consumes:
      - application/json
      description: |-
        Retrieves the list of all Apps that current user has access to.

        Note that `display_options` and `s3` entries are not returned for this endpoint.
      operationId: AppList
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.AppRequest'
            type: array
        "500":
          description: Data fetch failure or User not found.
          schema:
            $ref: '#/definitions/schema.Error'
      security:
      - OAuthAccessCode:
        - all
      summary: Get Apps List
      tags:
      - App
  /api/app/{app_id}/device/{id}:
    get:
      description: Retrieves detailed information about Device with given UDID, belonging
        to a given App.
      operationId: DeviceGetWithApp
      parameters:
      - description: Public App ID
        in: path
        name: app_id
        required: true
        type: string
      - description: Device ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.DeviceResponse'
        "400":
          description: Invalid Device or App ID.
          schema:
            $ref: '#/definitions/schema.Error'
        "403":
          description: User has no access to Device with given ID.
          schema:
            $ref: '#/definitions/schema.Error'
        "500":
          description: Failed getting Device information.
          schema:
            $ref: '#/definitions/schema.Error'
      security:
      - OAuthAccessCode:
        - all
      summary: Get Device Info
      tags:
      - Device
  /api/app/{app_id}/version/{id}/symbols:
    post:
      consumes:
      - multipart/form-data
      description: |-
        Upload a file representing debugging symbols for given App and Version.

        The file would usually be a:
        * dSYM .zip bundle for iOS
        * mapping.txt text file for Android
        * .js.map JSON file for Web

        The server automatically detects what kind of file was uploaded and assigns
        it to the correct OS/SDK.
      operationId: AppVersionSymbolsUpload
      parameters:
      - description: App ID
        in: path
        name: app_id
        required: true
        type: string
      - description: Version ID
        in: path
        name: id
        required: true
        type: integer
      - description: Binary encoded file contents
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.AppVersionSymbol'
        "400":
          description: Invalid form payload.
          schema:
            $ref: '#/definitions/schema.Error'
        "403":
          description: User has no access to App with given ID.
          schema:
            $ref: '#/definitions/schema.Error'
        "404":
          description: Invalid ID(s).
          schema:
            $ref: '#/definitions/schema.Error'
        "500":
          description: Failed processing or storing the file.
          schema:
            $ref: '#/definitions/schema.Error'
      security:
      - OAuthAccessCode:
        - all
      summary: Upload Symbols
      tags:
      - Version
  /api/app/{app_id}/version/{version_id}/symbols/{id}:
    delete:
      description: |-
        Deletes specified symbols file/bundle.

        Also invalidates cache(s), therefore any crashes symbolicated with that symbols before will not be symbolicated anymore.
      operationId: AppVersionSymbolsDelete
      parameters:
      - description: App ID
        in: path
        name: app_id
        required: true
        type: string
      - description: Version ID
        in: path
        name: version_id
        required: true
        type: integer
      - description: Symbols ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "403":
          description: User has no access to App with given ID.
          schema:
            $ref: '#/definitions/schema.Error'
        "404":
          description: Invalid ID(s).
          schema:
            $ref: '#/definitions/schema.Error'
        "500":
          description: Failed deleting symbols.
          schema:
            $ref: '#/definitions/schema.Error'
      security:
      - OAuthAccessCode:
        - all
      summary: Delete Symbols
      tags:
      - Version
  /api/app/{id}/device/{udid}/erase:
    post:
      description: |-
        Block and delete device data or unblock device data.

        When Blocked we:
        * stop storing any data coming from this device
        * delete device details such as name and key values
        * delete all device logs

        When Unblocked we:
        * allow the data coming from this device to be stored again (*it doesn't restore the old data)
      operationId: DeviceDataErasure
      parameters:
      - description: App ID
        in: path
        name: id
        required: true
        type: string
      - description: Device udid
        in: path
        name: udid
        required: true
        type: string
      - description: Payload Schema
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.DeviceDataErasureRequest'
      responses:
        "200":
          description: OK
        "400":
          description: Error unmarshalling DeviceDataErasureRequest body
          schema:
            $ref: '#/definitions/schema.Error'
        "403":
          description: You need to be Administrator in the team
          schema:
            $ref: '#/definitions/schema.Error'
        "404":
          description: Application id param is invalid or missing, Application not
            found, Device not found
          schema:
            $ref: '#/definitions/schema.Error'
        "500":
          description: Error erasing device data
          schema:
            $ref: '#/definitions/schema.Error'
      security:
      - OAuthAccessCode:
        - all
      summary: Erase Device Data
      tags:
      - Device
  /api/app/{id}/devices:
    get:
      description: |-
        Retrieves Devices associated with given App.

        In `format: json`, supports pagination through a Pager object returned
        along with the data.

        Note that error responses are always returned as `application/json`.
      operationId: DownloadDevices
      parameters:
      - description: App ID
        in: path
        name: id
        required: true
        type: string
      - description: |-
          If provided, retrieves only Devices registered before or at the given Date.
          Must be formatted as RFC3339 compliant string.
        in: query
        name: data_range_end
        type: string
      - description: |-
          If provided, retrieves only Devices registered at or after the given Date.
          Must be formatted as RFC3339 compliant string.
        in: query
        name: data_range_start
        type: string
      - description: Return devices in "deleted and blocked" mode. This request can
          only be made with `json` format.
        in: query
        name: device_erased
        type: boolean
      - description: |-
          If provided, retrieves only Devices matching the ID.
          A `*` can be used to perform a prefix match.

          Note that this is the UUID assigned to Device, not the numeric ID used
          to identify Device in other API queries.
        in: query
        name: device_id
        type: string
      - description: |-
          If provided, retrieves only Devices matching filter based on custom Device Data.

          Format is a space separated list of filters in form of either `key=value`, `value`
          The 'value' will match value against all existing keys. Quotes can be used to specify
          values with spaces. Quotes and backslashes can be escaped with backslash (e.g. `\"`, `\\`).
          The '*' can be used as “suffix wildcard”, so `key=*` will match every device whose key is defined
          regardless of its value.
        in: query
        name: device_key_values
        type: string
      - description: If provided, retrieves only Devices matching the Model.
        in: query
        name: device_model
        type: string
      - description: |-
          If provided, retrieves only Devices matching the Name.
          A `*` can be used to perform a prefix match.
        in: query
        name: device_name
        type: string
      - description: If provided, retrieves only Devices that are Enabled(`1`) or
          Disabled(`0`).
        in: query
        name: device_status
        type: integer
      - description: whether we should exclude the total_count field
        in: query
        name: excludeTotalCount
        type: boolean
      - description: |-
          Format in which to return data.
          If not specified, downloads Devices as csv file.
        enum:
        - csv
        - json
        - ndjson
        in: query
        name: format
        type: string
      - description: If provided, retrieves only Devices matching the Language.
        in: query
        name: language
        type: string
      - description: Cursor to the next page.
        in: query
        name: nextCursor
        type: string
      - enum:
        - seen
        - nameaz
        - nameza
        in: query
        name: order
        type: string
      - description: If provided, retrieves only Devices matching the OS Version.
        in: query
        name: os_version
        type: string
      - description: Size (i.e. number of items) of the page for paginated results.
          Max 100. Default 10.
        in: query
        name: page_size
        type: integer
      - description: If provided, retrieves only Devices matching the App Version.
        in: query
        name: version
        type: integer
      produces:
      - application/json
      - application/x-ndjson
      - text/csv
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.DeviceWriterJSON'
        "400":
          description: Invalid input parameter(s).
          schema:
            $ref: '#/definitions/schema.Error'
        "403":
          description: User has no access to App with given ID.
          schema:
            $ref: '#/definitions/schema.Error'
        "404":
          description: App with given ID does not exist.
          schema:
            $ref: '#/definitions/schema.Error'
        "500":
          description: Failed to retrieve or send Devices.
          schema:
            $ref: '#/definitions/schema.Error'
      security:
      - OAuthAccessCode:
        - all
      summary: Get App Devices
      tags:
      - App
  /api/app/{id}/logs/download:
    get:
      description: |-
        Retrieves logs for a given App ID.

        Note that `application/json` formatting is only really used for reporting errors.
        Successful responses should expect the format to be as specified in the `format` parameter.
      operationId: LogsDownload
      parameters:
      - description: App ID
        in: path
        name: id
        required: true
        type: string
      - description: |-
          If provided, retrieves only Logs before or at the given Date.
          Must be formatted as RFC3339 compliant string.
        in: query
        name: date_range_end
        type: string
      - description: |-
          If provided, retrieves only Logs at or after the given Date.
          Must be formatted as RFC3339 compliant string.
        in: query
        name: date_range_start
        type: string
      - description: If provided, retrieves only Logs related to this Device.
        in: query
        name: device_id
        type: string
      - description: |-
          Format in which to return data.
          If not specified, downloads currently available Logs as text file.
        enum:
        - ndjson
        - csv
        - event-stream
        in: query
        name: format
        type: string
      - description: |-
          If provided, retrieves only Logs at or above the given Level.
          Log levels are ordered in this following way: Fatal, Error, Warning, Info, Debug, Trace (from more to less critical).
          Permitted levels are: Debug = 0, Warning = 1, Error = 2, Trace = 3, Info = 4, Fatal = 5
          (note enum numbers are not sorted, this is for backwards compatibility with previous clients)
        in: query
        name: level
        type: integer
      - description: If provided, retrieves only Logs matching the Session ID.
        in: query
        name: session
        type: string
      - description: |-
          If provided, retrieves only Logs with given Tag(s).
          Multiple Tags can be specified by a comma separated string.
        in: query
        name: tags
        type: string
      - description: |-
          If set to true and `format: event-stream`, keep the connection
          open and keep sending in new Logs.
        in: query
        name: tail
        type: string
      - description: Unused.
        in: query
        name: text
        type: string
      - description: |-
          Only for text file download.
          Converts Log timestamps to be in the given timezone.
        in: query
        name: tz
        type: string
      produces:
      - application/json
      - application/x-ndjson
      - text/event-stream
      - text/csv
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/logfile.ndJSONOutput'
            type: array
        "400":
          description: Invalid input parameter(s).
          schema:
            $ref: '#/definitions/schema.Error'
        "403":
          description: User has no access to App with given ID.
          schema:
            $ref: '#/definitions/schema.Error'
        "404":
          description: App with given ID does not exist.
          schema:
            $ref: '#/definitions/schema.Error'
        "500":
          description: Failed to retrieve Logs or send Logs in `event-stream` format
            or find User.
          schema:
            $ref: '#/definitions/schema.Error'
      security:
      - OAuthAccessCode:
        - all
      summary: Download App Logs
      tags:
      - App
  /api/app/{id}/logs/paginated:
    get:
      description: |
        Retrieves logs for a given App ID.
      operationId: AppLogs
      parameters:
      - description: App ID
        in: path
        name: id
        required: true
        type: string
      - description: Filters by app version
        in: query
        name: app_version
        type: integer
      - description: Pagination cursor. Not to be used in your queries.
        in: query
        name: cursor
        type: string
      - description: Filters logs before or at the given date. RFC3339 string (eg.
          2021-01-24T00:00:00+01:00).
        format: date-time
        in: query
        name: date_range_end
        type: string
      - description: Filters logs after or at the given date. RFC3339 string (eg.
          2021-01-24T00:00:00+01:00).
        format: date-time
        in: query
        name: date_range_start
        type: string
      - description: Filters logs for the given device Model (* suffix for starts
          with search).
        in: query
        name: device_model
        type: string
      - description: Filters logs for the given device Name (* suffix for starts with
          search).
        in: query
        name: device_name
        type: string
      - description: Filters logs for the given device ID. Usually an UUID (eg. 123e4567-e89b-12d3-a456-426614174000).
        in: query
        name: device_udid
        type: string
      - description: Search navigation cursor. Not to be used in your queries.
        in: query
        name: highlight
        type: string
      - description: |-
          Finds a crash, issue or user feedback with the given ID. The result will be a single log.
          This is useful to get navigation cursors around the log.
        in: query
        name: issue
        type: string
      - description: |-
          Filters by log level. Returns logs at or above the given level.
          Log levels are ordered in this following way: Fatal (5), Error (2), Warning (1), Info (4), Debug (0), Trace (3) (from more to less critical).
          Note enum numbers are not sorted for backwards compatibility.
        enum:
        - 5
        - 2
        - 1
        - 4
        - 0
        - 3
        in: query
        name: level
        type: integer
      - default: 0
        description: Sort logs by newest first (order=0) or oldest first (order=1).
        in: query
        name: order
        type: integer
      - default: 100
        description: Number of logs to return per page.
        in: query
        maximum: 10000
        minimum: 1
        name: page_size
        type: integer
      - description: Pagination state. Not to be used in your queries.
        in: query
        name: query_id
        type: string
      - description: Filters logs belonging to the given session ID.
        in: query
        name: session_uuid
        type: string
      - description: Filters by log tags. Multiple tags can be specified, separated
          by commas (eg. "Network,Storage").
        in: query
        name: tags
        type: string
      - description: Filters by log content.
        in: query
        name: text
        type: string
      - description: Highlights log content. Useful when users want to search for
          some logs but still see the surrounding ones.
        in: query
        name: text_highlight
        type: string
      - description: |-
          Finds a log with the given ID. The result will be a single log.
          This is useful to get navigation cursors around the log.
        in: query
        name: uuid
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.paginatedLogs'
            type: array
        "400":
          description: Invalid input parameter(s).
          schema:
            $ref: '#/definitions/schema.Error'
        "403":
          description: User has no access to App with given ID.
          schema:
            $ref: '#/definitions/schema.Error'
        "404":
          description: App with given ID does not exist.
          schema:
            $ref: '#/definitions/schema.Error'
      security:
      - OAuthAccessCode:
        - all
      summary: Get App Logs (paginated)
      tags:
      - App
  /api/app/{id}/versions:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: Get list of versions registered for given App.
      operationId: AppVersions
      parameters:
      - description: App ID
        in: path
        name: id
        required: true
        type: string
      - description: Payload Schema
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schema.AppVersionsQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.versionsResponse'
        "400":
          description: Invalid form payload.
          schema:
            $ref: '#/definitions/schema.Error'
        "403":
          description: User has no access to App with given ID.
          schema:
            $ref: '#/definitions/schema.Error'
        "404":
          description: Invalid App ID.
          schema:
            $ref: '#/definitions/schema.Error'
        "500":
          description: Failed getting Versions information.
          schema:
            $ref: '#/definitions/schema.Error'
      security:
      - OAuthAccessCode:
        - all
      summary: List App Versions
      tags:
      - Version
  /api/device/{id}:
    get:
      description: Retrieves detailed information about Device with given ID.
      operationId: DeviceGet
      parameters:
      - description: Device ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.DeviceResponse'
        "400":
          description: Invalid Device ID.
          schema:
            $ref: '#/definitions/schema.Error'
        "403":
          description: User has no access to Device with given ID.
          schema:
            $ref: '#/definitions/schema.Error'
        "500":
          description: Failed getting Device information.
          schema:
            $ref: '#/definitions/schema.Error'
      security:
      - OAuthAccessCode:
        - all
      summary: '[DEPRECATED] Get Device Info'
      tags:
      - Device
    patch:
      consumes:
      - application/json
      description: |-
        Updates Device properties.

        Currently used to enable or disable a Device.

        Returns a Device object with updates applied.
      operationId: DevicePatch
      parameters:
      - description: Device ID
        in: path
        name: id
        required: true
        type: integer
      - description: Payload Schema
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.DeviceEditRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.DeviceResponse'
        "400":
          description: Invalid Device ID and/or Payload.
          schema:
            $ref: '#/definitions/schema.Error'
        "403":
          description: User has no access to Device with given ID.
          schema:
            $ref: '#/definitions/schema.Error'
        "404":
          description: Device with given ID does not exist.
          schema:
            $ref: '#/definitions/schema.Error'
        "500":
          description: Failed to save new Device properties.
          schema:
            $ref: '#/definitions/schema.Error'
      security:
      - OAuthAccessCode:
        - all
      summary: Edit Device
      tags:
      - Device
  /api/upload-symbols:
    post:
      consumes:
      - multipart/form-data
      description: |-
        Helps uploading debugging symbols through automated tools.

        Note that Bugfender provides plugins for common scenarios, like using Android Gradle and Xcode builds. This endpoint is for cases not covered by these.

        Uses a token based authentication. The token should be obtained through the dashboard
        and provided as Authorization HTTP header.

        Each token is bound to a single Bugfender App and therefore it is assumed that uploaded symbols refer to that App.

        If provided version variables indicate a version that does not exist in Bugfender,
        it will be implicitly created.

        Example usage through curl (replace zeros with your upload symbols token):

        `$ curl https://dashboard.bugfender.com/api/upload-symbols -H 'Authorization: Bearer 0000000000-00000000000000000000000000000000' -F version=1.0 -F build=11 -F file=@mapping.txt`
      operationId: UploadSymbols
      parameters:
      - description: Value in form `Bearer <upload_symbols_token>`. Please note this
          is not the OAuth 2.0 token but a specific token for uploading symbols.
        in: header
        name: Authorization
        required: true
        type: string
      - description: Version for which to store symbols
        in: formData
        name: version
        required: true
        type: string
      - description: Build for which to store symbols
        in: formData
        name: build
        required: true
        type: string
      - description: Binary encoded symbols file contents
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Invalid form payload or Authorization value.
          schema:
            $ref: '#/definitions/schema.Error'
        "500":
          description: Failed storing symbols.
          schema:
            $ref: '#/definitions/schema.Error'
      summary: Upload debugging symbols [for use in automations]
      tags:
      - App
  /auth/authorize:
    get:
      description: |-
        Allows authorizing using Authorization Code Grant flow.

        Note that `application/json` formatting is only really used for reporting errors.
        Successful response will render a HTML access approval form.

        To obtain Client ID, please contact Support.
      operationId: OAuthAuthorize
      parameters:
      - in: query
        name: client_id
        type: string
      - in: query
        name: redirect_uri
        type: string
      - description: Must be set to `code`.
        in: query
        name: response_type
        type: string
      - description: Currently unused.
        in: query
        name: scope
        type: string
      - in: query
        name: state
        type: string
      produces:
      - application/json
      - text/html
      responses:
        "200":
          description: OK
        "400":
          description: Request form was invalid, i.e. could not be parsed or contained
            invalid fields or fields with invalid values.
          schema:
            type: string
        "500":
          description: Tried to authorize non-existing user.
          schema:
            $ref: '#/definitions/schema.Error'
      summary: Request Authorization
      tags:
      - OAuth
  /auth/token:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: |-
        Performs authorization.

        There are multiple flows available:
        * Authorization Code
        * Client Credentials
        * Refresh Token

        Please refer to the parameters documentation below for details on what is required in different scenarios.

        To obtain Client ID and Secret, please contact Support.
      operationId: OAuthToken
      parameters:
      - description: If provided, and `client_id` not provided by other means, used
          to obtain Client ID and Secret. Value must be in form of `Basic <client_id>:<client_secret>`.
        in: header
        name: Authorization
        type: string
      - description: Type of grant to check for.
        enum:
        - authorization_code
        - refresh_token
        - client_credentials
        in: formData
        name: grant_type
        required: true
        type: string
      - description: 'Code used for Authorization Code flow. Required if `grant_type:
          authorization_code`.'
        in: formData
        name: code
        type: string
      - description: Redirect URI used for Authorization Code flow.
        in: formData
        name: redirect_uri
        type: string
      - description: Client ID. Required if not supplied through `Authorization` header.
        in: formData
        name: client_id
        type: string
      - description: Client Secret. Required if not supplied through `Authorization`
          header.
        in: formData
        name: client_secret
        type: string
      - description: 'Access Token to refresh. Required if `grant_type: refresh_token`.'
        in: formData
        name: refresh_token
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.tokenResponse'
        "400":
          description: Supplied input information was invalid.
          schema:
            $ref: '#/definitions/web.errorResponse'
        "401":
          description: User with given credentials is not authorized.
          schema:
            $ref: '#/definitions/web.errorResponse'
        "500":
          description: Internal Server Error.
          schema:
            $ref: '#/definitions/web.errorResponse'
      summary: Authorize
      tags:
      - OAuth
schemes:
- https
securityDefinitions:
  OAuthAccessCode:
    authorizationUrl: /auth/authorize
    flow: accessCode
    scopes:
      all: ' Provides access to all of user''s resources'
    tokenUrl: /auth/token
    type: oauth2
swagger: "2.0"
