{
  "swagger": "2.0",
  "info": {
    "title": "Accounts API",
    "description": "This API integrates Commerzbank cash and savings accounts into your app with all details, such as account balances and transactions.",
    "version": "3.0.0"
  },
  "host": "api.commerzbank.com",
  "basePath": "/accounts-api/v3",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json",
    "application/problem+json"
  ],
  "paths": {
    "/accounts": {
      "get": {
        "summary": "Reads a list of accounts",
        "description": "Returns a list of all available accounts (ID and basic contract information) for a logged in or referenced customer, in addition with balances if the optional parameter 'withBalance' is set.",
        "operationId": "getAccountList",
        "tags": [
          "accounts"
        ],
        "security": [
          {
            "OAuth AuthorizationCode": [
              "ACCOUNT_INFORMATION",
              "ACCOUNT_BALANCES"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/withBalance"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/accountList"
            },
            "examples": {
              "application/json": {
                "accounts": [
                  {
                    "accountId": "cVtXGXNaWl9FV0RDaBQC",
                    "iban": "DE27550400220929900900",
                    "bban": "550400220929900900",
                    "currency": "EUR",
                    "productCategory": "savingsAccount",
                    "_links": {
                      "balances": {
                        "href": "https://api-sandbox.commerzbank.com/accounts-api/v2-s/accounts/cVtXGXNaWl9FV0RDaBQC/balances"
                      },
                      "transactions": {
                        "href": "https://api-sandbox.commerzbank.com/accounts-api/v2-s/accounts/cVtXGXNaWl9FV0RDaBQC/transactions"
                      }
                    }
                  },
                  {
                    "accountId": "cVtXGXNaWl9EWURDaBQC",
                    "iban": "DE58550400220929901700",
                    "bban": "550400220929901700",
                    "currency": "EUR",
                    "productCategory": "cashAccount",
                    "_links": {
                      "balances": {
                        "href": "https://api-sandbox.commerzbank.com/accounts-api/v2-s/accounts/cVtXGXNaWl9EWURDaBQC/balances"
                      },
                      "transactions": {
                        "href": "https://api-sandbox.commerzbank.com/accounts-api/v2-s/accounts/cVtXGXNaWl9EWURDaBQC/transactions"
                      }
                    }
                  }
                ]
              }
            }
          },
          "400": {
            "description": "invalid-params or invalid-entity",
            "schema": {
              "$ref": "#/definitions/validationProblem"
            },
            "examples": {
              "application/json": {
                "title": "invalid-params or invalid-entity",
                "status": 400
              }
            }
          },
          "404": {
            "description": "account-not-found",
            "schema": {
              "$ref": "#/definitions/problem"
            },
            "examples": {
              "application/json": {
                "title": "account-not-found",
                "status": 404
              }
            }
          },
          "500": {
            "description": "internal-server-error",
            "schema": {
              "$ref": "#/definitions/problem"
            },
            "examples": {
              "application/json": {
                "title": "internal-server-error",
                "status": 500
              }
            }
          }
        }
      }
    },
    "/accounts/{account-id}": {
      "get": {
        "summary": "Reads account details",
        "description": "Returns detailed contract information for a given account as well as the account balances, if parameter 'withBalance' is set.\n\n Note: This operation currently provides the same basic account information as 'Read a list of accounts', more detailed information will be available soon.",
        "operationId": "getAccountByAccountId",
        "tags": [
          "accounts"
        ],
        "security": [
          {
            "OAuth AuthorizationCode": [
              "ACCOUNT_INFORMATION_DETAILS",
              "ACCOUNT_BALANCES"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/account-id"
          },
          {
            "$ref": "#/parameters/withBalance"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/account"
            },
            "examples": {
              "application/json": {
                "accountId": "cVtXGXNaWl9FV0RDaBQC",
                "iban": "DE27550400220929900900",
                "bban": "550400220929900900",
                "currency": "EUR",
                "productCategory": "savingsAccount",
                "_links": {
                  "balances": {
                    "href": "https://api-sandbox.commerzbank.com/accounts-api/v2-s/accounts/cVtXGXNaWl9FV0RDaBQC/balances"
                  },
                  "transactions": {
                    "href": "https://api-sandbox.commerzbank.com/accounts-api/v2-s/accounts/cVtXGXNaWl9FV0RDaBQC/transactions"
                  }
                }
              }
            }
          },
          "400": {
            "description": "invalid-params or invalid-entity",
            "schema": {
              "$ref": "#/definitions/validationProblem"
            },
            "examples": {
              "application/json": {
                "title": "invalid-params or invalid-entity",
                "status": 400
              }
            }
          },
          "404": {
            "description": "account-not-found",
            "schema": {
              "$ref": "#/definitions/problem"
            },
            "examples": {
              "application/json": {
                "title": "account-not-found",
                "status": 404
              }
            }
          },
          "500": {
            "description": "internal-server-error",
            "schema": {
              "$ref": "#/definitions/problem"
            },
            "examples": {
              "application/json": {
                "title": "internal-server-error",
                "status": 500
              }
            }
          }
        }
      }
    },
    "/accounts/{account-id}/balances": {
      "get": {
        "summary": "Reads account balances",
        "description": "Returns the balances for a given account.",
        "operationId": "getBalancesByAccountId",
        "tags": [
          "accounts"
        ],
        "security": [
          {
            "OAuth AuthorizationCode": [
              "ACCOUNT_BALANCES"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/account-id"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/accountBalances"
            },
            "examples": {
              "application/json": {
                "account": {
                  "iban": "DE27550400220929900900",
                  "currency": "EUR"
                },
                "balances": [
                  {
                    "balanceType": "interimAvailable",
                    "balanceAmount": {
                      "amount": "4289.46",
                      "currency": "EUR"
                    },
                    "creditLimitIncluded": false,
                    "referenceDate": "2021-01-06",
                    "lastChangeDateTime": "2021-01-06T11:15:00.123+02:00"
                  }
                ]
              }
            }
          },
          "400": {
            "description": "invalid-params",
            "schema": {
              "$ref": "#/definitions/validationProblem"
            },
            "examples": {
              "application/json": {
                "title": "invalid-params",
                "status": 400
              }
            }
          },
          "404": {
            "description": "account-not-found or balances-not-available",
            "schema": {
              "$ref": "#/definitions/problem"
            },
            "examples": {
              "application/json": {
                "title": "account-not-found or balances-not-available",
                "status": 404
              }
            }
          },
          "500": {
            "description": "internal-server-error",
            "schema": {
              "$ref": "#/definitions/problem"
            },
            "examples": {
              "application/json": {
                "title": "internal-server-error",
                "status": 500
              }
            }
          }
        }
      }
    },
    "/accounts/{account-id}/transactions": {
      "get": {
        "summary": "Reads a transaction list",
        "description": "Returns a list of transactions for a given account (cash accounts only).",
        "operationId": "getTransactionListForAccountByAccountId",
        "tags": [
          "transactions"
        ],
        "security": [
          {
            "OAuth AuthorizationCode": [
              "ACCOUNT_TRANSACTIONS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/accept-language"
          },
          {
            "$ref": "#/parameters/account-id"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit of elements that are to be returned. Default: 5",
            "required": false,
            "type": "integer",
            "minimum": 5,
            "maximum": 200
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Key which determines the next elements to be returned.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/accountTransactions"
            },
            "examples": {
              "application/json": {
                "account": {
                  "iban": "DE27550400220929900900",
                  "currency": "EUR"
                },
                "transactions": [
                  {
                    "transactionId": "API1911817412800",
                    "bookingDate": "2021-01-02",
                    "bookingTimestamp": "2021-01-02T11:15:00.123+02:00",
                    "valueDate": "2021-01-02",
                    "transactionAmount": {
                      "amount": "1400.00",
                      "currency": "EUR"
                    },
                    "remittanceInformation": "Kontoübertrag",
                    "externalReference": "DAUERLASTSCHSD123456XXX78901234567",
                    "paymentInformation": {
                      "endToEndId": "1239845982650",
                      "mandateId": "0562895489321",
                      "counterpartNames": [
                        "Klaus Peter Fritz Walter Heinz Udo",
                        "Mueller Meyer"
                      ],
                      "counterpartAccount": {
                        "iban": "DE12345678901234567890",
                        "currency": "EUR"
                      }
                    }
                  },
                  {
                    "transactionId": "API1916107065500",
                    "bookingDate": "2021-01-04",
                    "bookingTimestamp": "2021-01-04T11:15:00.123+02:00",
                    "valueDate": "2021-01-04",
                    "transactionAmount": {
                      "amount": "1500.00",
                      "currency": "EUR"
                    },
                    "remittanceInformation": "Kontoausgleich",
                    "externalReference": "DAUERLASTSCHSD123456XXX78901234567",
                    "paymentInformation": {
                      "endToEndId": "1239845982650",
                      "mandateId": "0562895489321",
                      "counterpartNames": [
                        "Klaus Peter Mueller Meyer"
                      ],
                      "counterpartAccount": {
                        "iban": "DE12345678901234567890",
                        "currency": "EUR"
                      }
                    }
                  },
                  {
                    "transactionId": "API1914716020800",
                    "bookingDate": "2021-01-06",
                    "bookingTimestamp": "2021-01-06T11:15:00.123+02:00",
                    "valueDate": "2021-01-06",
                    "transactionAmount": {
                      "amount": "-100.00",
                      "currency": "EUR"
                    },
                    "remittanceInformation": "Sparen für Später",
                    "externalReference": "DAUERLASTSCHSD123456XXX78901234567",
                    "paymentInformation": {
                      "endToEndId": "1239845982650",
                      "mandateId": "0562895489321",
                      "counterpartNames": [
                        "Fritz Walter Meyer"
                      ],
                      "counterpartAccount": {
                        "iban": "DE12345678901234567890",
                        "currency": "EUR"
                      }
                    }
                  }
                ],
                "balances": [
                  {
                    "balanceType": "interimAvailable",
                    "balanceAmount": {
                      "amount": "4289.46",
                      "currency": "EUR"
                    },
                    "creditLimitIncluded": false,
                    "referenceDate": "2021-01-06",
                    "lastChangeDateTime": "2021-01-06T11:15:00.123+02:00"
                  }
                ],
                "_metadata": {
                  "cursors": {
                    "current": "eyJhbGciOiJIUzI1NiIsTRkZGMtYWQ3Yy0xYmQ5",
                    "next": "eyJIUzI1NiI6ImFsZ3QiLE1YWRkZGApMWA4="
                  }
                }
              }
            }
          },
          "400": {
            "description": "invalid-params",
            "schema": {
              "$ref": "#/definitions/validationProblem"
            },
            "examples": {
              "application/json": {
                "title": "invalid-params",
                "status": 400
              }
            }
          },
          "404": {
            "description": "account-not-found or transactions-not-available",
            "schema": {
              "$ref": "#/definitions/problem"
            },
            "examples": {
              "application/json": {
                "title": "account-not-found or transactions-not-available",
                "status": 404
              }
            }
          },
          "406": {
            "description": "unsupported-language",
            "schema": {
              "$ref": "#/definitions/problem"
            },
            "examples": {
              "application/json": {
                "title": "unsupported-language",
                "status": 406
              }
            }
          },
          "500": {
            "description": "internal-server-error",
            "schema": {
              "$ref": "#/definitions/problem"
            },
            "examples": {
              "application/json": {
                "title": "internal-server-error",
                "status": 500
              }
            }
          }
        }
      }
    },
    "/availability": {
      "get": {
        "summary": "Provides a ping check for availability.",
        "description": "",
        "operationId": "getAvailability",
        "tags": [
          "availability"
        ],
        "responses": {
          "204": {
            "description": "service is available"
          }
        }
      }
    }
  },
  "parameters": {
    "authorization": {
      "name": "Authorization",
      "in": "header",
      "required": true,
      "pattern": "^Bearer [A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*$",
      "type": "string"
    },
    "accept-language": {
      "name": "Accept-Language",
      "in": "header",
      "description": "A RFC 7231 compliant Accept-Language header, which currently only supports variants of &#39;de&#39; and &#39;en&#39; This field is used to determine the language of Remittance Information",
      "type": "string",
      "required": true
    },
    "account-id": {
      "name": "account-id",
      "in": "path",
      "description": "ID of requested account.\nThe account-id is the 'accountId' attribute of the 'account' structure and can be retrieved by using a 'Read a list of accounts' call.",
      "required": true,
      "type": "string"
    },
    "withBalance": {
      "name": "withBalance",
      "in": "query",
      "description": "Including account balances.",
      "required": false,
      "type": "boolean"
    }
  },
  "definitions": {
    "account": {
      "description": "The account resource acts as a shell for an encapsulated customer contract. It provides a view with account identifiers (IBAN, BBAN-account number) and a range of most common contract data items.",
      "type": "object",
      "properties": {
        "accountId": {
          "description": "Account identifier. This is the data element to be used as path parameter 'account-id' or query parameter 'accountId' when requesting data for a particular account.",
          "type": "string",
          "maxLength": 35
        },
        "iban": {
          "description": "IBAN for this account.",
          "type": "string",
          "pattern": "^[A-Z]{2}\\d{2}[a-zA-Z0-9]{1,30}$"
        },
        "bban": {
          "description": "ISO 20022 Basic Bank Account Number (BBAN). Corresponds to iban without country code (digits 1-2) and checksum (digits 3-4).",
          "type": "string",
          "pattern": "^[a-zA-Z0-9]{1,30}$"
        },
        "currency": {
          "description": "ISO 4217 currency code.",
          "type": "string",
          "pattern": "^[A-Z]{3}$"
        },
        "productCategory": {
          "description": "Product category of this account.",
          "type": "string",
          "x-extensible-enum": [
            "cashAccount",
            "savingsAccount"
          ]
        },
        "balances": {
          "$ref": "#/definitions/balanceList"
        },
        "_links": {
          "type": "object",
          "properties": {
            "balances": {
              "type": "object",
              "properties": {
                "href": {
                  "description": "Link to the balances of this account.",
                  "type": "string"
                }
              }
            },
            "transactions": {
              "type": "object",
              "properties": {
                "href": {
                  "description": "Link to the transactions of this account.",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "accountBalances": {
      "description": "List of available balances for a given account.",
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/accountReferenceIban"
        },
        "balances": {
          "$ref": "#/definitions/balanceList"
        }
      }
    },
    "accountList": {
      "description": "List of all available and accessable accounts for a given customer.",
      "type": "object",
      "properties": {
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/account"
          }
        }
      }
    },
    "accountReferenceIban": {
      "description": "Reference to an account by IBAN and optional currency code.",
      "type": "object",
      "properties": {
        "iban": {
          "type": "string",
          "pattern": "^[A-Z]{2}\\d{2}[a-zA-Z0-9]{1,30}$"
        },
        "currency": {
          "type": "string",
          "description": "ISO 4217 code.",
          "pattern": "^[A-Z]{3}$"
        }
      }
    },
    "accountTransactions": {
      "description": "List of transactions for a given account and period.",
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/accountReferenceIban"
        },
        "transactions": {
          "type": "array",
          "description": "A list of booked transactions on this account.",
          "items": {
            "$ref": "#/definitions/transaction"
          }
        },
        "balances": {
          "$ref": "#/definitions/balanceList"
        },
        "_metadata": {
          "type": "object",
          "properties": {
            "cursors": {
              "description": "The pointer to determine the starting point. This must always contain the identification of the first/last page element and the direction of the pagination. The direction of the pagination is displayed in front of the minus sign. The cursor should be an opaque pointer, which contains all necessary information. This prevents a creation by the client. To make a combination with limit possible, only the first/last entry of the next page is encoded in the cursor. This way the limit size can be adjusted for each pagination.",
              "type": "object",
              "properties": {
                "current": {
                  "description": "Current position of the cursor.",
                  "type": "string"
                },
                "next": {
                  "description": "Next position of the cursor.",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "transaction": {
      "description": "A single transaction with detailed information.",
      "type": "object",
      "properties": {
        "transactionId": {
          "description": "Transaction ID. This is the data element to be used in the path when retrieving data for a dedicated transaction.",
          "type": "string",
          "maxLength": 35
        },
        "bookingDate": {
          "description": "Date of booking for 'booked' transactions.",
          "type": "string",
          "format": "date"
        },
        "bookingTimestamp": {
          "description": "Booking timestamp, supplied for 'booked' transactions only.",
          "type": "string",
          "format": "date-time"
        },
        "valueDate": {
          "description": "Value date.",
          "type": "string",
          "format": "date"
        },
        "transactionAmount": {
          "$ref": "#/definitions/amount"
        },
        "remittanceInformation": {
          "type": "string",
          "description": "Remittance information or posting text."
        },
        "externalReference": {
          "description": "external (customer) reference.",
          "type": "string",
          "maxLength": 35
        },
        "paymentInformation": {
          "description": "Contains information on a SEPA payment",
          "type": "object",
          "properties": {
            "endToEndId": {
              "description": "Unique end to end identifier.",
              "type": "string",
              "maxLength": 35
            },
            "mandateId": {
              "description": "SEPA Mandate ID.",
              "type": "string",
              "maxLength": 35
            },
            "counterpartNames": {
              "description": "Counterpart names.",
              "type": "array",
              "items": {
                "type": "string",
                "maxLength": 35
              },
              "maxItems": 2
            },
            "counterpartAccount": {
              "$ref": "#/definitions/accountReferenceIban"
            }
          }
        }
      }
    },
    "amount": {
      "type": "object",
      "properties": {
        "amount": {
          "description": "The amount given with fractional digits, where fractions must be compliant to the currency definition.\nUp to 14 significant figures, negative amounts are signed by minus.\nThe decimal separator is a dot.",
          "type": "string",
          "pattern": "^-?\\d{1,14}(\\.\\d{1,3})?$"
        },
        "currency": {
          "description": "ISO 4217 currency code.",
          "type": "string",
          "pattern": "^[A-Z]{3}$"
        }
      }
    },
    "balance": {
      "description": "Account balance.",
      "type": "object",
      "properties": {
        "balanceType": {
          "$ref": "#/definitions/balanceType"
        },
        "balanceAmount": {
          "$ref": "#/definitions/amount"
        },
        "creditLimitIncluded": {
          "description": "Indicates if the credit limit of the corresponding account is included in the calculation of the balance.\nApplicable (true) for balanceType 'authorized' only.",
          "type": "boolean"
        },
        "referenceDate": {
          "description": "Reference date of this balance.",
          "type": "string",
          "format": "date"
        },
        "lastChangeDateTime": {
          "description": "Timestamp of last 'booked' transaction included in this balance.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "balanceList": {
      "description": "List of balances regarding this account, e.g. the current balance or the last booked balance.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/balance"
      }
    },
    "balanceType": {
      "description": "interimAvailable: Available balance calculated in the course of the business day, at the time specified, and subject to further changes during the business day. The interim balance is calculated on the basis of booked credit and debit items during the calculation time/period specified.",
      "type": "string",
      "x-extensible-enum": [
        "interimAvailable"
      ]
    },
    "problem": {
      "description": "A problem object according to RFC 7807.",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "format": "uri",
          "description": "An absolute URI that identifies the problem type.  When dereferenced,\nit SHOULD provide human-readable documentation for the problem type\n(e.g., using HTML)."
        },
        "title": {
          "type": "string",
          "description": "A short, summary of the problem type. Written in english and readable for engineers (usually not suited for non technical stakeholders and not localized)."
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "The HTTP status code generated by the origin server for this occurrence of the problem.",
          "minimum": 100,
          "maximum": 600,
          "exclusiveMaximum": true
        },
        "detail": {
          "type": "string",
          "description": "A human readable explanation specific to this occurrence of the problem."
        },
        "instance": {
          "type": "string",
          "format": "uri",
          "description": "An absolute URI that identifies the specific occurrence of the problem.\nIt may or may not yield further information if dereferenced."
        }
      }
    },
    "validationProblem": {
      "allOf": [
        {
          "$ref": "#/definitions/problem"
        },
        {
          "description": "A problem object according to RFC 7807, enriched with information about validation errors.",
          "type": "object",
          "properties": {
            "invalid-params": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The path of the field in which the validation error occurred."
                  },
                  "reason": {
                    "type": "string",
                    "description": "The reason why the validation failed."
                  }
                }
              }
            }
          }
        }
      ]
    }
  },
  "securityDefinitions": {
    "OAuth AuthorizationCode": {
      "type": "oauth2",
      "description": "The tokenmanager used for sandbox services with grant type Authorization Code.",
      "flow": "accessCode",
      "authorizationUrl": "https://api.commerzbank.com/auth/realms/external/protocol/openid-connect/auth",
      "tokenUrl": "https://api.commerzbank.com/auth/realms/external/protocol/openid-connect/token",
      "scopes": {
        "ACCOUNT_INFORMATION": "Grants read access to basic account information",
        "ACCOUNT_INFORMATION_DETAILS": "Grants read access to detailed account information",
        "ACCOUNT_BALANCES": "Grants read access to account balancces",
        "ACCOUNT_TRANSACTIONS": "Grants read access to account transactions",
        "CASH_ACCOUNT_FUNDS_CONFIRMATIONS": "Grants access to account confirmations (cash accounts)"
      }
    },
    "OAuth (External) Password": {
      "type": "oauth2",
      "description": "The tokenmanager used for external services.",
      "flow": "password",
      "tokenUrl": "https://api.commerzbank.com/auth/realms/external/protocol/openid-connect/token",
      "scopes": {}
    }
  },
  "security": [
    {
      "OAuth AuthorizationCode": []
    }
  ]
}